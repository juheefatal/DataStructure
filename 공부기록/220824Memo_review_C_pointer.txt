* 오늘의 문제1(에라토스테네스의 체 알고리즘)
	2부터 100까지의 자연수들 중에서 소수(prime)구하기
* 오늘의 문제2
	포인터 ptr이 가리키는 문자열 상수를 배열 str에 복사하고, str출력하기
	const char* ptr = "Dream comes true!";
	char str[81] = { 0 };


# c언어 복습
· 포인터의 기본개념
	- 저장공간의 주소(Memory address)를 저장하기 위한 변수
	- 포인터는 '포인터가 가리키는 저장공간에 저장되어 있는 값'에 접근하기 위해 사용됨
	- 포인터가 그 저장공간을 가리킨다고 표현
	- 주소와 자료형을 모두 알고 있어야 제대로 된 값을 읽어올 수 있을 것!
	- 컴퓨터 시스템의 메모리 주소 : 64비트 시스템 → 8byte 크기의 포인터 사용(16진수 16자리)
	- 포인터의 자료형 = 포인터가 가리키는 저장공간의 자료형
	- 포인터 선언시에는 포인터연산자(*)이용
	- 포인터는 '주소'를 저장하는 변수인데, 그러면 주소는 어떻게 알 수 있나?
	→ 어떤 변수등에 할당된 저장공간을 구하기 위해 참조연산자(&)이용
		(참조연산자 : 변수 등에 할당된 저장공간의 주소를 구하는 연산자)
	    int num = 9;
	    int *ptr = &num;
		→ 변수 num의 주소를 포인터 ptr에 저장하겠다는 것. num이 int형이므로 *ptr도 int

· 포인터 연산자(*) : 역참조연산자, 간접참조연산자라고도 함
	- 포인터에 저장되어있는 주소의 저장공간, 즉, '포인터가 가리키는 저장공간'에 접근하기 위한 연산자
	    int *ptr;
	    int num = 10;
	
	    ptr = &num;
	
	    printf("num = %d\n", num);
	    printf("*ptr = %d\n", *ptr);

· NULL포인터 : 주소가 할당되지 않은 포인터. 아무것도 가리키고 있지 않은 상태
	- <stdio.h>, <stdlib.h>, <string.h>에 NULL포인터가 정의되어있음
	- 보통 변수 초기화할 때 0으로 초기화 하듯, 포인터도 NULL포인터로 초기화

· void포인터
	- 다른 포인터와는 달리 void포인터는 자료형을 지정하지 않음
	- 주소전달만이 목적인 경우 void포인터 많이 사용
	- 어떤 자료형의 포인터이든 void포인터에 저장할 수 있고,
	   반대로 void포인터를 다른 자료형의 포인터에도 저장할 수 있음

· 배열(array)과 포인터(pointer)
	- 배열 : 배열에 할당된 저장공간을 가리키는 포인터. 첫번째 원소가 저장되어있는 저장공간의 주소가 곧 배열의 주소
	- 배열을 포인터의 일종이라고 생각할 수 있으나 엄밀히 포인터와 배열은 차이가 있음
	- 공통점 : 배열도 메모리의 주소를, 포인터도 메모리의 주소를 저장하고 있는 것은 동일
	  차이점 : 배열은 저장하고 있는 값을 절대! 변경할 수 없음 / 포인터는 변수이므로 저장하고 있는 값 변경 가능
		 배열의 저장공간의 크기는 자료형과 원소의 개수에 따라 결정됨 / 포인터는 자료형에 상관 없이 무조건 동일(8byte)

· 포인터의 산술연산
	- 포인터의 산술연산은 첫번째 피연산자가 포인터, 두번째 피연산자는 정수
	- 포인터가 가리키는 주소에서 앞으로 몇 칸, 뒤로 몇 칸 이동하겠다는 의미의 연산
	- 정리하면, 포인터의 산술연산은 포인터가 가리키는 저장공간에서 두번째 피연산자만큼 이동한 곳의 '주소'를 구하는 연산
	- 이동하는 칸의 크기는 포인터의 자료형에 따라 결정됨. int형 포인터였다면 한칸 = 4byte
	- 배열에서 원소를 읽기 위해 사용하는 인덱스연산([]) → 컴파일러는 포인터연산자와 포인터의 산술연산으로 해석

· 문자열(String)
	- 문자들의 집합을 문자열이라고 함. C언어에서는 별도의 자료형 없어 큰따옴표("")로 묶어 표현
	- 문자열의 맨 마지막에는 문자열의 끝을 의미하는 널문자(null character, \0)이 꼭 붙어야 함. Null-terminated string
	- 문자열은 char자료형 배열에 저장할 수 있음

· 문자상수와 문자열상수
	- 문자상수 : 한글자 / 문자열 상수 : 한글자 이상
	- 문자상수표기 : 작은따옴표(''), 문자열상수표기 : 큰따옴표("")
	- 문자상수 처리방법 : 정수로 처리 / 문자열상수 처리방법 : 주소로 처리

· 문자열처리방법
	1. 배열을 이용해 문자열 저장
	    - 문자열의 맨 마지막에 문자열의 끝을 의미하는 널문자붙여야 하므로 문자열길이보다 1바이트 크게 배열의 크기 설정해야함
	2. 문자열상수를 포인터이용해 참조
	    - 문자열상수(문자열리터럴)도 포인터이기 때문에 문자열이 저장된 저장공간의 주소를 나타냄.
	    - 문자열상수를 char자료형 포인터에 저장할 수 있을 것!
	    - 문자열 상수도 '상수'이므로 수정불가능. 문자열 상수를 포인터에 저장할때도 마찬가지로 const char자료형으로 선언해야함
	    - 보통 const선언 되어있으면 그 선언되어있는 식별자를 상수취급하겠다는 의미이지만
		포인터가 const선언되어있으면 '포인터가 가리키는 저장공간의 값'을 변화시키지 않겠다는 의미


	



·  