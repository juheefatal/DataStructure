* 오늘의 문제1(유클리드 알고리즘)
	두 자연수의 최대 공약수를 구하는 알고리즘인 유클리드 알고리즘 이용해 최대공약수 구하기
	사용자에게 자연수 2개(n1, n2)를 입력받은 후 그 두 수의 최대공약수 출력하기
	· 유클리드 알고리즘 : 두 자연수 a, b(a>b)에 대해서 a를 b로 나눈 나머지를 r이라고 하면
			a와 b의 최대공약수는 b와 r의 최대공약수와 동일
			이 과정을 반복수행, 나머지가 0이 될 때까지 반복해주면 됨
	

# 자료구조와 알고리즘
# 자료구조
· 프로그램(Program, Software, Application)
	- 데이터를 표현하고, 그렇게 표현된 데이터를 처리하는 명령어들의 집합
· 자료구조(Data Structure)
	- 프로그램에서 사용하는 데이터들을 표현하고 저장하는 방법
	- 데이터를 구조적으로 표현하는 방식과 이를 구현하는데 필요한 알고리즘에 대해 논하는 기초 이론
· 형태에 따른 자료구조의 종류 분류
	- 단순구조 (예- 배열)
	- 선형구조 : 값이 순차적으로 나열됨
	    - 리스트
	    - 스택
	    - 큐
	    - 덱 (덱 = 스택+큐)
	- 비선형구조
	    - 그래프 : 그래프사용 주목적 - 최단거리찾기
		- 유향그래프
		- 무향그래프
	    - 트리
		- 이진트리
· 구현에 따른 자료구조의 종류 분류
	- 배열
	    - 튜플
	- 연결리스트 : 배열이 비효율적일 때가 많아 배열 대체해서 사용하는 경우 많음
	    - 원형연결리스트
	    - 이중연결리스트
		- 원형이중연결리스트
	- 해시테이블
· 추상자료형(ADT; Abstract Data Type)
	- 알고리즘으로 문제를 해결하는데 필요한 자료의 형태와 자료를 사용한 연산들을 정의한 수학적 모델
	- 추상자료형이 정의한 연산들을 구현한 구현체 = 자료구조
	* 자료구조라는 단어가 광범위하게 쓰이기 때문에 추상자료형을 가리키기 위해 사용되기도 함

# 알고리즘
· 알고리즘(Algorithm)
	- 문제를 해결하는 효율적인 방법을 탐색
	- 수학과 컴퓨터과학, 언어학 등의 분야에서 어떤 문제를 해결하기 위해 정해진 절차나 방법을 공식화 한 형태로 표현
	- 컴퓨터는 프로그램의 명령에 따라 순서대로 일을 처리하는데, 이때 '효율적으로 결과 얻기 위해' 알고리즘 필수!
	- 프로그램 = 컴퓨터에게 지정한 기능을 수행하도록 지시하는 명령어들의 집합
· 자료구조에 따라 알고리즘이 달라짐. 알고리즘은 자료구조에 의존적이라는 것!
· 알고리즘의 조건
	- 입력(Input)	: 외부에서 제공되는 자료가 존재
	- 출력(Output)	: 최소 1개 이상의 결과 도출
	- 명확성(Clarity)	: 각 단계가 명확해서 '애매함'이 없어야 함
	- 유한성(Finiteness) : 각 단계들을 '유한한 횟수'만큼 거친 후 문제해결하고 종료해야 함
	- 효과성(Effectiveness) : 알고리즘의 모든 연산은 사람이 종이,연필로 유한한 시간내에 정확하게 수행할 수 있을 정도로 단순해야 함
· 효율적인 알고리즘
	- 프로그램에서 사용할 수 있는 시스템 자원(공간)과 시가는 유한
	- 적은 시간, 적은 공간을 이용해 문제를 해결할 수 있어야 좋은 알고리즘
	- 알고리즘 평가기준
		- 시간복잡도(Time Complexity) : 문제해결하는데 걸린 연산(시간)의 횟수
			- 입력 n개에 대한 소요시간을 분석
			- Big-O 표기법 이용해 나타냄. '비교연산'의 횟수를 분석 : CPU가 '비교연산처리시간'이 매우 길기 때문
				- O(1)	: 상수시간 - 문제해결위해 '고정된 횟수'만큼의 단계 필요
				- O(log n) : 로그시간 - 문제해결위한 단계가 특정요인에 의해 감소됨
				- O(n)	: 직선적시간 - 문제해결위한 단계가 입력값 n과 비례해 증가
				- O(n²)	: 2차시간 - 문제해결위한 단계가 입력값 n의 제곱에 비례해 증가. 대부분의 case
				- O(cⁿ)	: 지수시간 - 문제해결위한 단계가 상수 c의 n제곱에 비례해 증가
		- 공간복잡도(Space Complexity) : 문제해결하는데 든 시스템자원(공간)의 크기. 주로 메모리를 기준으로 삼음
· 알고리즘의 분류
	- 구현에 따른 분류 : 재귀적 / 연역적 / 결정론적 / 근사 / 양자 / …
	- 설계에 따른 분류 : 무차별대입공격 / 분할정복 / 그래프순회 / 분기한정법 / 확률적 / 리덕션 / 백트래킹
	- 최적화문제	: 선형계획법 / 동적계획법 / 탐욕 / 휴리스틱
	- 이론적분야	: 검색 / 정렬 / 수치 / 그래프 / 문자열 / 암호학적 / 기계학습 / 데이터압축